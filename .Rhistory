ll <- list(a=rnorm(6, mean=1), b=rnorm(6, mean=4), c=rnorm(6, mean=6))
ll
lapply(ll, mean)
lapply(ll, mean, na.rm=TRUE)
x * 2
meanRemoveNA <- function(x) mean(x, na.rm=TRUE)
lapply(ll, meanRemoveNA)
fun_name <- function(args) {
# body, containing R expressions return(value)
}
lapply(ll, function(x) mean(x, na.rm=TRUE))
meanRemoveNAVerbose <- function(x, warn=TRUE) {
# A function that removes missing values when calculating the mean # and warns us about it.
if (any(is.na(x)) && warn) { warning("removing some missing values!")
}
mean(x, na.rm=TRUE)
}
lapply(ll, function(x) mean(x, na.rm=TRUE))
sapply(ll, function(x) mean(x, na.rm=TRUE))
ind_1 <- list(loci_1=c("T", "T"), loci_2=c("T", "G"), loci_3=c("C", "G"))
ind_2 <- list(loci_1=c("A", "A"), loci_2=c("G", "G"), loci_3=c("C", "G"))
mapply(function(a, b) length(intersect(a, b)), ind_1, ind_2)
source("functions/functions-lesson.R")
d <- read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
d$GC.binned <- cut(d$percent.GC, 5)
read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
d <- read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
d$GC.binned <- cut(d$percent.GC, 5)
d_split <- split(d$depth, d$GC.binned)
str(d_split)
unlist(lapply(d_split, mean))
d <- read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
d$GC.binned <- cut(d$percent.GC, 5)
read.csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
View(d)
d$GC.binned <- cut(d$percent.GC, 5)
d$GC.binned <- cut(20, 5)
d_split <- split(d$depth, d$GC.binned)
str(d_split)
lapply(d_split, mean)
unlist(lapply(d_split, mean))
sapply(d_split, mean)
dpth_summ <- lapply(split(d$depth, d$GC.binned), summary)
dpth_summ
rbind(dpth_summ[[1]], dpth_summ[[2]])
cbind(dpth_summ[[1]], dpth_summ[[2]])
do.call(rbind, dpth_summ)
do.call(rbind, lapply(split(d$depth, d$GC.binned), summary))
tapply(d$depth, d$GC.binned, mean)
aggregate(d$depth, list(gc=d$GC.binned), mean)
aggregate(d$depth, list(gc=d$GC.binned), mean)
if (!require("dplyr")) install.packages("dplyr") # install dplyr if it's not already installed
library(dplyr)
if (!require("dplyr")) install.packages("dplyr") # install dplyr if it's not already installed
library(dplyr)
d_df <- tbl_df(d)
d_df
select(d_df, start, end, Pi, Recombination, depth) #equivalent to d[, c("start", "end", "Pi", "Recombination", "depth")]
filter(d_df, Pi > 16, percent.GC > 80) #equivalent to d[d$Pi > 16 & d$percent.GC > 80, ]
filter(d_df, Pi > 16, X.GC > 80) #equivalent to d[d$Pi > 16 & d$percent.GC > 80, ]
arrange(d_df, depth) #equivalent to `d[order(d$depth), ]`
arrange(d_df, desc(total.SNPs), desc(depth))
d_df <- select(d_df, -diversity) # remove our earlier diversity column
d_df <- mutate(d_df, diversity = Pi/(10*1000))
d_df
d_df %>%  mutate(GC.scaled = scale(percent.GC)) %>%
filter(GC.scaled > 4, depth > 4) %>%
select(start, end, depth, GC.scaled, percent.GC) %>%
arrange(desc(depth))
d_df %>%  mutate(GC.scaled = scale(X.GC)) %>%
filter(GC.scaled > 4, depth > 4) %>%
select(start, end, depth, GC.scaled, X.GC) %>%
arrange(desc(depth))
mtfs <- read.delim("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/motif_recombrates.txt", header=TRUE)
mtfs_df <- tbl_df(mtfs)
mtfs_df %>% group_by(chr)
mtfs_df %>%
group_by(chr) %>%
summarize(max_recom = max(recom), mean_recom = mean(recom), num=n())
mtfs_df %>% group_by(chr) %>%
summarize(max_recom = max(recom), mean_recom = mean(recom), num=n()) %>%
arrange(desc(max_recom))
# if
if (x == some_value) {
# do some stuff in here
} else if (x == other_value) {
# elseif is optional
} else {
#else is optional
}
# if
if (x == 100) {
# do some stuff in here
} else if (x == 50) {
# elseif is optional
} else {
#else is optional
}
# sample a random number from a Poisson distribution
# with a mean (lambda) of 8
x <- rpois(1, lambda=8)
if (x >= 10) {
print("x is greater than or equal to 10")
}
x
# sample a random number from a Poisson distribution
# with a mean (lambda) of 8
x <- rpois(10, lambda=8)
if (x >= 10) {
print("x is greater than or equal to 10")
}
x
# sample a random number from a Poisson distribution
# with a mean (lambda) of 8
x <- rpois(1, lambda=8)
if (x <= 10) {
print("x is greater than or equal to 10")
}
x
for(i in 1:10){
print(i)
}
for(i in 1:3){
for(j in c('a', 'b', 'c')){
print(paste(i,j))
}
}
z <- 1
while(z > 0.1){
z <- runif(1)
print(z)
}
x <-c(-3,1,-5,2)
ifelse(x < 0, -1, 1)
x <- c(-3, 1, -5, 2)
y <- rep(1, length(x))
y[x < 0] <- -1
y
load("C:/Users/user/R-Assignment/.RData")
file.size("fang_et_al_genotypes.txt")
Genotypes <- read.table("fang_et_al_genotypes.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(Genotypes)
Genotypes_joined$Chromosome <- factor(Genotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
Genotypes <- read.table("fang_et_al_genotypes.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
SNPposition <- read.table("snp_position.txt", header = TRUE, fill = TRUE, sep = "\t", stringsAsFactors = FALSE)
setwd("/Users/user/R-Assignment_jincyliao")
Genotypes <- read.table("fang_et_al_genotypes.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
SNPposition <- read.table("snp_position.txt", header = TRUE, fill = TRUE, sep = "\t", stringsAsFactors = FALSE)
typeof(Genotypes)
typeof(SNPposition)
dim(Genotypes)
dim(SNPposition)
file.size("fang_et_al_genotypes.txt")
file.size("snp_position.txt")
Genotypes_joined <- merge(SNPposition_sorted, Genotypes_transposed, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
Maize <- c("ZMMIL", "ZMMLR", "ZMMMR")
Teosinte <- c("ZMPBA", "ZMPIL", "ZMPJA")
MaizeGenotypes <- Genotypes[Genotypes$Group %in% Maize, ]
TeosinteGenotypes <- Genotypes[Genotypes$Group %in% Teosinte, ]
MaizeGenotypes_cut <- MaizeGenotypes[,-1:-3]
TeosinteGenotypes_cut <- TeosinteGenotypes[,-1:-3]
SNPposition_cut <- SNPposition[, c("SNP_ID","Chromosome","Position")]
MaizeGenotypes_transposed <- as.data.frame(t(MaizeGenotypes_cut))
TeosinteGenotypes_transposed <- as.data.frame(t(TeosinteGenotypes_cut))
> is.data.frame(MaizeGenotypes_transposed)
[1] TRUE
> is.data.frame(TeosinteGenotypes_transposed)
[1] TRUE
is.data.frame(MaizeGenotypes_transposed)
is.data.frame(TeosinteGenotypes_transposed)
SNPsMaizeGenotypes_transposed <- cbind(SNP_ID = rownames(MaizeGenotypes_transposed), MaizeGenotypes_transposed)
rownames(SNPsMaizeGenotypes_transposed) <- NULL
SNPsTeosinteGenotypes_transposed <- cbind(SNP_ID = rownames(TeosinteGenotypes_transposed), TeosinteGenotypes_transposed)
rownames(SNPsTeosinteGenotypes_transposed) <- NULL
SNPposition_sorted <- SNPposition_cut[order(SNPposition_cut$SNP_ID),] #sort by SNP_ID
Maize_sorted <- SNPsMaizeGenotypes_transposed[order(SNPsMaizeGenotypes_transposed$SNP_ID),] #sort by SNP_ID
Teosinte_sorted <- SNPsTeosinteGenotypes_transposed[order(SNPsTeosinteGenotypes_transposed$SNP_ID),] #sort by SNP_ID
table(SNPposition_sorted$SNP_ID %in% Maize_sorted$SNP_ID)
table(SNPposition_sorted$SNP_ID %in% Teosinte_sorted$SNP_ID)
Maize_joined <- merge(SNPposition_sorted, Maize_sorted, by.x="SNP_ID", by.y="SNP_ID")
Teosinte_joined <- merge(SNPposition_sorted, Teosinte_sorted, by.x="SNP_ID", by.y="SNP_ID")
MaizeIncrease_ordered <- Maize_joined[mixedorder(Maize_joined$Position),]
TeosinteIncrease_ordered <- Teosinte_joined[mixedorder(Teosinte_joined$Position),]
MaizeIncrease_ordered <- Maize_joined[mixedorder(Maize_joined$Position),]
library(gtools)
MaizeIncrease_ordered <- Maize_joined[mixedorder(Maize_joined$Position),]
TeosinteIncrease_ordered <- Teosinte_joined[mixedorder(Teosinte_joined$Position),]
Maize_missing <- as.data.frame(lapply(Maize_joined, function(x) {gsub("\\?","-", x)})) # missing data replaced with symbol -
Teosinte_missing <- as.data.frame(lapply(Teosinte_joined, function(x) {gsub("\\?","-", x)})) # missing data replaced with symbol -
MaizeDecrease_ordered <- Maize_missing[mixedorder(as.character(Maize_missing$Position), decreasing=TRUE),]
TeosinteDecrease_ordered <- Teosinte_missing[mixedorder(as.character(Teosinte_missing$Position), decreasing=TRUE),]
Genotypes_joined <- merge(SNPposition_sorted, Genotypes_transposed, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
Genotypes_transposed <- as.data.frame(t(Genotypes))
Genotypes_joined <- merge(SNPposition_sorted, Genotypes_transposed, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
Genotypes_joined$Chromosome <- factor(Genotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
ggplot(Genotypes_joined, aes((Chromosome))) + geom_bar()
Genotypes_joined$Chromosome <- factor(Genotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
library(ggplot)
ggplot(Genotypes_joined, aes((Chromosome))) + geom_bar()
Genotypes_joined$Chromosome <- factor(Genotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
library(ggplot2)
ggplot2(Genotypes_joined, aes((Chromosome))) + geom_bar()
Genotypes_joined$Chromosome <- factor(Genotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
library(ggplot2)
ggplot(Genotypes_joined, aes((Chromosome))) + geom_bar()
ggplot(Genotypes, aes(Group)) +  geom_bar()
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar()
ggplot(Genotypes_joined, aes(Chromosome) + geom_bar()
q
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar() +
ggtitle("Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar() +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, fill=Chromosome)) +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, fill=Null)) +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome) +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
q
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, )) +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(Genotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, fill=Chromosome)) +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(Genotypes, aes(Group)) +
geom_bar(aes(x=Group, fill=Group))
ggplot(Genotypes, aes(Group)) +
geom_bar(aes(x=Group, fill=Group)) +
labs(x=Null,y="SNP Count")
ggplot(Genotypes, aes(Group)) +
geom_bar(aes(x=Group, fill=Group)) +
labs(x="Group",y="SNP Count")
HeadersNames<- colnames(Genotypes)[-c(1:3)]
Genotypes_melted <- melt(Genotypes, measure.vars = HeadersNames)
HeadersNames<- colnames(Genotypes)[-c(1:3)]
library(reshape2)
Genotypes_melted <- melt(Genotypes, measure.vars = HeadersNames)
HeadersNames<- colnames(Genotypes)[-c(1:3)]
library(reshape2)
Genotypes_melted <- melt(Genotypes, measure.vars = HeadersNames)
Genotypes_melted[ Genotypes_melted == "?/?" ] = NA  # assign all missing values as NA
Genotypes_melted$isHomozygous <- (Genotypes_melted$value=="A/A" | Genotypes_melted$value=="C/C" | Genotypes_melted$value=="G/G" | Genotypes_melted$value=="T/T")
Genotypes_sorted_SampleID <- Genotypes_melted[order(Genotypes_melted$Sample_ID),]
Genotypes_sorted_Group <- Genotypes_melted[order(Genotypes_melted$Group),]
Genotypes_sorted_SampleID <- Genotypes_melted[order(Genotypes_melted$Sample_ID),]
counting_SampleID <- ddply(Genotypes_sorted_SampleID, c("Sample_ID"), summarise, Homozygous=sum(isHomozygous, na.rm=TRUE), Heterozygous=sum(!isHomozygous, na.rm=TRUE), NA=sum(is.na(isHomozygous)))
counting_SampleID <- ddply(Genotypes_sorted_SampleID, c("Sample_ID"), summarise, counting_Homozygous=sum(isHomozygous, na.rm=TRUE), counting_Heterozygous=sum(!isHomozygous, na.rm=TRUE), NA=sum(is.na(isHomozygous)))
counting_SampleID <- ddply(Genotypes_sorted_SampleID, c("Sample_ID"), summarise, counting_Homozygous=sum(isHomozygous, na.rm=TRUE), counting_Heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
library(dplyr)
counting_SampleID <- ddply(Genotypes_sorted_SampleID, c("Sample_ID"), summarise, counting_Homozygous=sum(isHomozygous, na.rm=TRUE), counting_Heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
library(plyr)
counting_SampleID <- ddply(Genotypes_sorted_SampleID, c("Sample_ID"), summarise, counting_Homozygous=sum(isHomozygous, na.rm=TRUE), counting_Heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
library(plyr)
counting_SampleID <- ddply(Genotypes_sorted_SampleID, c("Sample_ID"), summarise, counting_Homozygous=sum(isHomozygous, na.rm=TRUE), counting_Heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_SampleID_melt <- melt(counting_SampleID, measure.vars = c("Homozygous", "Heterozygous", "NA"))
counting_SampleID_melt <- melt(counting_SampleID, measure.vars = c("counting_Homozygous", "counting_Heterozygous", "isNA"))
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "stack")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= Value, fill=Variable)) + geom_bar(stat = "identity", position = "fill")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=Variable)) + geom_bar(stat = "identity", position = "fill")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill") +  ggtitle("Proportion of SNP Types By Population") +
labs(x="Group",y="Proportion")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill") +  ggtitle("Proportion of SNPs") +
labs(x="Group",y="Proportion")
counting_Group <- ddply(Genotypes_sorted_Group, c("Group"), summarise, counting_Homozygous=sum(isHomozygous, na.rm=TRUE), counting_Heterozygous=sum(!isHomozygous, na.rm=TRUE), isNA=sum(is.na(isHomozygous)))
counting_Group_melt <- melt(counting_Group, measure.vars = c("counting_Homozygous", "counting_Heterozygous", "isNA"))
ggplot(counting_Group_melt,aes(x = Group, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill") +  ggtitle("Proportion of SNPs") +
labs(x="Group",y="Proportion")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill") +  ggtitle("Proportion of SNPs") +
labs(x="Sample_ID",y="Proportion")
ggplot(counting_SampleID_melt,aes(x = Sample_ID, y= value, fill=variable)) + geom_bar(stat = "identity", position = "fill") +  ggtitle("Proportion of SNPs") +
labs(x="Sample_ID",y="Proportion")
View(SNPposition_sorted)
View(SNPsMaizeGenotypes_transposed)
View(SNPsTeosinteGenotypes_transposed)
MaizeGenotypes_transposed <- as.data.frame(t(MaizeGenotypes))
MaizeGenotypes_joined <- merge(SNPposition_sorted, MaizeGenotypes_transposed, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
MaizeGenotypes_joined$Chromosome <- factor(MaizeGenotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
ggplot(MaizeGenotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, fill=Chromosome)) +
ggtitle("Total Number of SNPs for Each Chromosome") +
labs(x="Chromosome",y="SNP Count")
ggplot(MaizeGenotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, fill=Chromosome)) +
ggtitle("Total Number of SNPs for Each Chromosome(Maize)") +
labs(x="Chromosome",y="SNP Count")
View(TeosinteGenotypes_cut)
TeosinteGenotypes_transposed <- as.data.frame(t(TeosinteGenotypes))
TeosinteGenotypes_joined <- merge(SNPposition_sorted, TeosinteGenotypes_transposed, by.x = "SNP_ID", by.y ="row.names", all.y = TRUE)
TeosinteGenotypes_joined$Chromosome <- factor(TeosinteGenotypes_joined$Chromosome, levels = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "multiple", "unknown", "NA"))
ggplot(TeosinteGenotypes_joined, aes(Chromosome)) + geom_bar(aes(x=Chromosome, fill=Chromosome)) +
ggtitle("Total Number of SNPs for Each Chromosome(Teosinte)") +
labs(x="Chromosome",y="SNP Count")
save.image("C:/Users/user/R-Assignment_jincyliao/R-Assignment_jincyliao.RData")
